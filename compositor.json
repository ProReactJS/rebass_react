{
  "name": "jxnblk/rebass",
  "version": "0.1.3",
  "libraries": {
    "xv": "^1.1.1"
  },
  "title": "",
  "branch": "",
  "style": {
    "name": "Material",
    "fontFamily": "Roboto, sans-serif",
    "heading": {
      "fontWeight": 500,
      "letterSpacing": "-0.01em"
    },
    "colors": {
      "text": "#212121",
      "background": "#fff",
      "primary": "#2196f3",
      "secondary": "#4caf50",
      "highlight": "#ff4081",
      "border": "#e0e0e0",
      "muted": "#f5f5f5"
    }
  },
  "content": [
    {
      "component": "nav/AbsoluteNav",
      "links": [
        {
          "href": "http://jxnblk.com/rebass",
          "text": "Home"
        },
        {
          "href": "https://github.com/jxnblk/rebass",
          "text": "GitHub"
        },
        {
          "href": "https://npmjs.com/package/rebass",
          "text": "npm"
        }
      ]
    },
    {
      "component": "header/BannerHeader",
      "heading": "rebass",
      "subhead": "Configurable React Stateless Functional UI Components",
      "links": [
        {
          "text": "Tweet",
          "href": "https://twitter.com/intent/tweet?text=rebass%253A%2520Configurable%2520React%2520Stateless%2520Functional%2520UI%2520Components&url=http%253A%252F%252Fjxnblk.com%252Frebass"
        }
      ],
      "text": "v0.3.0"
    },
    {
      "component": "article/BasicArticle",
      "text": "\n\n<p><a href=\"https://travis-ci.org/jxnblk/rebass\"><img src=\"https://travis-ci.org/jxnblk/rebass.svg?branch=master\" alt=\"Build Status\"></a>\n<a href=\"https://codeclimate.com/github/jxnblk/rebass\"><img src=\"https://codeclimate.com/github/jxnblk/rebass/badges/gpa.svg\" alt=\"Code Climate\"></a>\n<a href=\"http://standardjs.com/\"><img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg\" alt=\"js-standard-style\"></a></p>\n<p><a href=\"http://jxnblk.com/rebass\">http://jxnblk.com/rebass</a></p>\n<h2 id=\"features\">Features</h2>\n<ul>\n<li>Uses inline styles</li>\n<li>No CSS dependencies</li>\n<li>No leaky global styles</li>\n<li><a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.ah4312963\">Presentational components</a> work with any application architecture</li>\n<li><a href=\"#configuration\">Configurable</a> with React Context</li>\n<li>Great for prototyping</li>\n<li>Production ready</li>\n<li><a href=\"https://travis-ci.org/jxnblk/rebass\">Tested</a></li>\n</ul>\n<p>Rebass is a React UI component library that uses inline styles to avoid CSS dependencies and prevent leaky global styles from affecting an application. Rebass components are built as stateless functional components and modeled as &lt;a href=&apos;https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.ah4312963&apos;&gt;presentational components&lt;/a&gt;. With unit tests for each component, Rebass is great for prototyping and ready for production.</p>\n<h2 id=\"getting-started\">Getting Started</h2>\n<pre><code class=\"lang-bash\">npm i rebass\n</code></pre>\n<pre><code class=\"lang-jsx\">import React from &apos;react&apos;\nimport { Button, Badge } from &apos;rebass&apos;\n\nclass App extends React.Component {\n  render () {\n    return (\n      &lt;App&gt;\n        &lt;Button&gt;Button&lt;/Button&gt;\n        &lt;Badge&gt;Badge&lt;/Badge&gt;\n      &lt;/App&gt;\n    )\n  }\n}\n</code></pre>\n<h2 id=\"component-documentation\">Component Documentation</h2>\n<p>Each component exposes a simple API of props. View the source code or see <a href=\"http://jxnblk.com/rebass\">http://jxnblk.com/rebass</a> for more information.</p>\n<h2 id=\"architectural-approach\">Architectural Approach</h2>\n<p>Rebass is built around a component architectural approach inspired by Dan Abramov&#x2019;s\n<a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.ah4312963\">Presentational and Container Components</a>,\nwhere presentational components are the only ones that encapsulate styles and contain no application logic,\nand container components do not contain any styles or DOM markup and handle all the application logic.</p>\n<p>Rebass only contains presentational components,\nwhich means controlling things like progressive disclosure mechanisms\nor dropdown menus should be handled at a higher level in container components.\nTherefore, Rebass itself does not require any client-side JavaScript,\nis well suited to server-side rendering,\nand can fit into virtually any higher level application architecture.</p>\n<h2 id=\"configuration\">Configuration</h2>\n<p>Global theme styles are set using\n<a href=\"https://facebook.github.io/react/docs/context.html\">React Context</a>.\nThis means that the default global styles can be configured,\nand component-specific styles can be added to customize on a per-component basis.</p>\n<p>View the <a href=\"http://jxnblk.com/rebass/demo\">demo</a> to see some configuration options in action.</p>\n<p>To configure the theme, add <code>childContextTypes</code> and <code>getChildContext</code> to your root component.</p>\n<pre><code class=\"lang-jsx\">class App extends React.Component {\n  static childContextTypes = {\n    rebass: React.PropTypes.object\n  }\n\n  getChildContext () {\n    return {\n      rebass: {\n        colors: myCustomColors,\n        fontSizes: [ 64, 48, 24, 18, 16, 14, 12],\n        Button: {\n          backgroundColor: &apos;tomato&apos;\n        }\n      }\n    }\n  }\n\n  render () {\n    // ...\n  }\n}\n</code></pre>\n<p>After setting context in the root component, all instances of Rebass components will use these values throughout the app.\nFor reference to the default values, see <a href=\"src/config.js\"><code>/src/config.js</code></a>.</p>\n<p>To alter per-component styles, pass a style object that matches the name of the component,\nlike the <code>Button</code> object in the example above.</p>\n<h2 id=\"per-instance-overrides\">Per-Instance Overrides</h2>\n<p>Components accept overrides using the <code>style</code> prop to handle any one-off situations.\nFor example, to remove the margin bottom from an Input for a particular situation, do the following</p>\n<pre><code class=\"lang-jsx\">&lt;Input\n  name=&apos;input_name&apos;\n  label=&apos;Input Label&apos;\n  style={{ border: 0 }} /&gt;\n</code></pre>\n<h2 id=\"base-styles\">Base Styles</h2>\n<p>Rebass components inherit styles where appropriate.\nSet your own base styles for color and fonts to customize the overall look and feel of an application.\nIt&apos;s recommended that you use <code>* { box-sizing: border-box }</code> and set <code>line-height: 1.5</code> on the body.</p>\n<p><strong>Example</strong></p>\n<pre><code class=\"lang-css\">* { box-sizing: border-box}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, sans-serif;\n  line-height: 1.5;\n  color: #111;\n  background-color: #fff;\n}\n</code></pre>\n<h2 id=\"styling-with-css\">Styling with CSS</h2>\n<p>Although it&apos;s not recommended to use extensively, components can be styled with CSS.\nEach component has a className that matches the component name.\nTo control things like button hover styles, this can be a convenient way to style pseudo-classes.\nNote, that due to the use of inline styles, some properties may need to be overridden with an <code>!important</code> flag.</p>\n<pre><code class=\"lang-css\">.Button:hover {\n  box-shadow: inset 0 0 0 9999px rgba(0, 0, 0, 0.125);\n}\n</code></pre>\n<hr>\n<p><em>Note: Unlike previous versions, Rebass is no longer explicitly associated with Basscss,\nbut shares a similar approach to application-agnostic UI development.</em></p>\n<p><a href=\".github/LICENSE.md\">MIT License</a></p>\n",
      "html": "\n\n<p><a href=\"https://travis-ci.org/jxnblk/rebass\"><img src=\"https://travis-ci.org/jxnblk/rebass.svg?branch=master\" alt=\"Build Status\"></a>\n<a href=\"https://codeclimate.com/github/jxnblk/rebass\"><img src=\"https://codeclimate.com/github/jxnblk/rebass/badges/gpa.svg\" alt=\"Code Climate\"></a>\n<a href=\"http://standardjs.com/\"><img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg\" alt=\"js-standard-style\"></a></p>\n<p><a href=\"http://jxnblk.com/rebass\">http://jxnblk.com/rebass</a></p>\n<h2 id=\"features\">Features</h2>\n<ul>\n<li>Uses inline styles</li>\n<li>No CSS dependencies</li>\n<li>No leaky global styles</li>\n<li><a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.ah4312963\">Presentational components</a> work with any application architecture</li>\n<li><a href=\"#configuration\">Configurable</a> with React Context</li>\n<li>Great for prototyping</li>\n<li>Production ready</li>\n<li><a href=\"https://travis-ci.org/jxnblk/rebass\">Tested</a></li>\n</ul>\n<p>Rebass is a React UI component library that uses inline styles to avoid CSS dependencies and prevent leaky global styles from affecting an application. Rebass components are built as stateless functional components and modeled as &lt;a href=&apos;https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.ah4312963&apos;&gt;presentational components&lt;/a&gt;. With unit tests for each component, Rebass is great for prototyping and ready for production.</p>\n<h2 id=\"getting-started\">Getting Started</h2>\n<pre><code class=\"lang-bash\">npm i rebass\n</code></pre>\n<pre><code class=\"lang-jsx\">import React from &apos;react&apos;\nimport { Button, Badge } from &apos;rebass&apos;\n\nclass App extends React.Component {\n  render () {\n    return (\n      &lt;App&gt;\n        &lt;Button&gt;Button&lt;/Button&gt;\n        &lt;Badge&gt;Badge&lt;/Badge&gt;\n      &lt;/App&gt;\n    )\n  }\n}\n</code></pre>\n<h2 id=\"component-documentation\">Component Documentation</h2>\n<p>Each component exposes a simple API of props. View the source code or see <a href=\"http://jxnblk.com/rebass\">http://jxnblk.com/rebass</a> for more information.</p>\n<h2 id=\"architectural-approach\">Architectural Approach</h2>\n<p>Rebass is built around a component architectural approach inspired by Dan Abramov&#x2019;s\n<a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.ah4312963\">Presentational and Container Components</a>,\nwhere presentational components are the only ones that encapsulate styles and contain no application logic,\nand container components do not contain any styles or DOM markup and handle all the application logic.</p>\n<p>Rebass only contains presentational components,\nwhich means controlling things like progressive disclosure mechanisms\nor dropdown menus should be handled at a higher level in container components.\nTherefore, Rebass itself does not require any client-side JavaScript,\nis well suited to server-side rendering,\nand can fit into virtually any higher level application architecture.</p>\n<h2 id=\"configuration\">Configuration</h2>\n<p>Global theme styles are set using\n<a href=\"https://facebook.github.io/react/docs/context.html\">React Context</a>.\nThis means that the default global styles can be configured,\nand component-specific styles can be added to customize on a per-component basis.</p>\n<p>View the <a href=\"http://jxnblk.com/rebass/demo\">demo</a> to see some configuration options in action.</p>\n<p>To configure the theme, add <code>childContextTypes</code> and <code>getChildContext</code> to your root component.</p>\n<pre><code class=\"lang-jsx\">class App extends React.Component {\n  static childContextTypes = {\n    rebass: React.PropTypes.object\n  }\n\n  getChildContext () {\n    return {\n      rebass: {\n        colors: myCustomColors,\n        fontSizes: [ 64, 48, 24, 18, 16, 14, 12],\n        Button: {\n          backgroundColor: &apos;tomato&apos;\n        }\n      }\n    }\n  }\n\n  render () {\n    // ...\n  }\n}\n</code></pre>\n<p>After setting context in the root component, all instances of Rebass components will use these values throughout the app.\nFor reference to the default values, see <a href=\"src/config.js\"><code>/src/config.js</code></a>.</p>\n<p>To alter per-component styles, pass a style object that matches the name of the component,\nlike the <code>Button</code> object in the example above.</p>\n<h2 id=\"per-instance-overrides\">Per-Instance Overrides</h2>\n<p>Components accept overrides using the <code>style</code> prop to handle any one-off situations.\nFor example, to remove the margin bottom from an Input for a particular situation, do the following</p>\n<pre><code class=\"lang-jsx\">&lt;Input\n  name=&apos;input_name&apos;\n  label=&apos;Input Label&apos;\n  style={{ border: 0 }} /&gt;\n</code></pre>\n<h2 id=\"base-styles\">Base Styles</h2>\n<p>Rebass components inherit styles where appropriate.\nSet your own base styles for color and fonts to customize the overall look and feel of an application.\nIt&apos;s recommended that you use <code>* { box-sizing: border-box }</code> and set <code>line-height: 1.5</code> on the body.</p>\n<p><strong>Example</strong></p>\n<pre><code class=\"lang-css\">* { box-sizing: border-box}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, sans-serif;\n  line-height: 1.5;\n  color: #111;\n  background-color: #fff;\n}\n</code></pre>\n<h2 id=\"styling-with-css\">Styling with CSS</h2>\n<p>Although it&apos;s not recommended to use extensively, components can be styled with CSS.\nEach component has a className that matches the component name.\nTo control things like button hover styles, this can be a convenient way to style pseudo-classes.\nNote, that due to the use of inline styles, some properties may need to be overridden with an <code>!important</code> flag.</p>\n<pre><code class=\"lang-css\">.Button:hover {\n  box-shadow: inset 0 0 0 9999px rgba(0, 0, 0, 0.125);\n}\n</code></pre>\n<hr>\n<p><em>Note: Unlike previous versions, Rebass is no longer explicitly associated with Basscss,\nbut shares a similar approach to application-agnostic UI development.</em></p>\n<p><a href=\".github/LICENSE.md\">MIT License</a></p>\n"
    },
    {
      "component": "footer/BasicFooter",
      "links": [
        {
          "href": "https://github.com/jxnblk/rebass",
          "text": "GitHub"
        },
        {
          "href": "https://github.com/jxnblk",
          "text": "jxnblk"
        }
      ]
    }
  ]
}